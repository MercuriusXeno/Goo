buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

repositories {
    mavenLocal()
    maven {
        name 'Jareds for Patchouli'
        url 'https://maven.blamejared.com'
    }
    maven {
        name 'LDTTeam for Aequivaleo'
        url 'https://ldtteam.jfrog.io/ldtteam/modding'
    }
}

version = "${goo_version}"
group = mod_group
archivesBaseName = mod_name + "-" + minecraft_target_version

sourceSets.main {
    resources {
        include '**/**'
        srcDirs += "$rootDir/src/generated/resources"
        exclude '.cache'
    }
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "${mcp_channel}", version: "${mcp_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // disable ref map so patchouli doesn't poop itself
            properties 'mixin.env.disableRefMap': 'true'
            mods {
                goo {
                    source(sourceSets.main)
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            // disable ref map so patchouli doesn't poop itself
            properties 'mixin.env.disableRefMap': 'true'
            mods {
                goo {
                    source(sourceSets.main)
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            // disable ref map so patchouli doesn't poop itself
            properties 'mixin.env.disableRefMap': 'true'
            args '--all', '--output', file('src/generated/resources/'),
                    '--reports',
                    '--mod', 'goo', '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                goo {
                    source(sourceSets.main)
                }
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_target_version}-${forge_version}"
    implementation 'org.jetbrains:annotations:15.0'

    compileOnly fg.deobf("mezz.jei:jei-${soft_deps_minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${soft_deps_minecraft_version}:${jei_version}")

    runtimeOnly fg.deobf("${aequivaleo_location}:${aequivaleo_version}:universal")
    compileOnly fg.deobf("${aequivaleo_location}:${aequivaleo_version}:api")
    compileOnly fg.deobf("${aequivaleo_location}:${aequivaleo_version}:vanilla-api")

    compileOnly fg.deobf("${patchouli_location}:${patchouli_version}:api")
    runtimeOnly fg.deobf("${patchouli_location}:${patchouli_version}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": mod_name.toLowerCase(),
                "Specification-Vendor": "xeno",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": mod_name,
                "Implementation-Version": "${goo_version}",
                "Implementation-Vendor" :"xeno",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
    inputs.property "goo_version", goo_version
    inputs.property "soft_deps_minecraft_version", soft_deps_minecraft_version
    inputs.property "min_forge_version", min_forge_version
    inputs.property "loader_version", loader_version
    inputs.property "aequivaleo_version", aequivaleo_version
    inputs.property "patchouli_version", patchouli_version

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand "goo_version": goo_version, "soft_deps_minecraft_version": soft_deps_minecraft_version,
                "min_forge_version": min_forge_version, "loader_version": loader_version,
                "aequivaleo_version": aequivaleo_version, "patchouli_version": patchouli_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
